#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(r32f, binding = 0) uniform image2D image;
layout(binding = 1) uniform sampler2D diffuse0;

#define PI 3.141592265359f

uint width = textureSize(diffuse0, 0).x;
uint height = textureSize(diffuse0, 0).y;
uint edge = width / 4;

void main() {
  uint face = uint(float(gl_GlobalInvocationID.x) / width * 4.f);
  float a = 2.f * gl_GlobalInvocationID.x / edge;
  float b = 2.f * (gl_GlobalInvocationID.y + edge) / edge;
  vec3 points[4] = vec3[4](
    vec3(-1.f, 1.f - a, 3.f - b), // back
    vec3(a - 3.f, -1.f, 3.f - b), // left
    vec3(1.f, a - 5.f, 3.f - b),  // front
    vec3(7.f - a, 1.f, 3.f - b)   // right
  );
  vec3 p = points[face];
  float theta = atan(p.y, p.x);
  float r = length(p.xy);
  float phi = atan(p.z, r);

  float uf = 2.f * edge * (theta + PI) / PI;
  float vf = 2.f * edge * (PI * 0.5f - phi) / PI;
  float ui = floor(uf);
  float vi = floor(vf);
  float u2 = ui + 1.f;
  float v2 = vi + 1.f;
  float mu = uf - ui;
  float nu = vf - vi;

  float A = texture(diffuse0, vec2(ui / width, vi / height)).r;
  float B = texture(diffuse0, vec2(u2 / width, vi / height)).r;
  float C = texture(diffuse0, vec2(ui / width, v2 / height)).r;
  float D = texture(diffuse0, vec2(u2 / width, v2 / height)).r;
  vec3 color = vec3(A * (1.f - mu) * (1.f - nu) + B * mu * (1.f - nu) + C * (1.f - mu) * nu + D * mu * nu);

  imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.f));
}

